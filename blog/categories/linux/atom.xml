<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ktkr3d]]></title>
  <link href="http://ktkr3d.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ktkr3d.github.io/"/>
  <updated>2014-01-10T21:05:55+09:00</updated>
  <id>http://ktkr3d.github.io/</id>
  <author>
    <name><![CDATA[ktkr3d]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[gitg 0.3.1]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/10/gitg-0-dot-3-1/"/>
    <updated>2014-01-10T20:31:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/10/gitg-0-dot-3-1</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/gitg_0.3.1_vala.png"><img src="/images/gitg_0.3.1_vala.png" alt="gitg 0.3.1" /></a></p>

<p><a href="https://wiki.gnome.org/Apps/Gitg#Get_gitg">https://wiki.gnome.org/Apps/Gitg#Get_gitg</a></p>

<p>VALA 言語で書き直されたgitg 0.3.1 がリリースされたので、ビルドして実行してみました。</p>

<!-- more -->


<h4>libgit2</h4>

<p>前提の<code>libgit2</code>をインストールします。<code>cmake</code> する際に<code>THREADSAFE</code> をON にしておきます。</p>

<p><code>bash
$ git clone https://github.com/libgit2/libgit2.git
$ cd libgit2
$ mkdir build &amp;&amp; cd build
$ cmake .. -DTHREADSAFE:BOOL=ON
$ sudo cmake --build . --target install
</code></p>

<h4>libgit2-glib</h4>

<p>前提の<code>libgit2-glib</code>をインストールします。API の引数が足らない旨のエラーが出るので、引数を追加します。</p>

<p><code>bash
$ git clone https://git.gnome.org/browse/libgit2-glib
</code></p>

<p>``` vala ./libgit2-glib/libgit2-glib/ggit-ref.c
gboolean
ggit_ref_has_reflog (GgitRef *ref)
{</p>

<pre><code>g_return_val_if_fail (GGIT_IS_REF (ref), FALSE);
</code></pre>

<p>//  return git_reference_has_log (_ggit_native_get (ref)) == 1;</p>

<pre><code>return git_reference_has_log (_ggit_native_get (ref), git_reference_name(ref)) == 1;
</code></pre>

<p>}
```</p>

<p><code>bash
$ cd libgit2-glib
$ ./autogen.sh
$ make
$ sudo make install
</code></p>

<h4>gitg</h4>

<p><code>gitg</code>をインストールします。</p>

<p><code>https://download.gnome.org/sources/gitg/0.3/gitg-0.3.1.tar.xz</code></p>

<p><code>bash
$ cd gitg-0.3.1
$ ./autogen.sh
$ make
$ sudo make install
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scroll up/down button add-on for firefox]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/02/scroll-up-slash-down-button-add-on-for-firefox/"/>
    <updated>2014-01-02T15:41:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/02/scroll-up-slash-down-button-add-on-for-firefox</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/scroll_buttons.png"><img src="/images/scroll_buttons.png"></a></p>

<p>Firefox にスクロールアップ/ダウンボタンを追加してみました。</p>

<!-- more -->


<p>タブレットにインストールしたLinux のFirefox ではタッチスクリーンを使ったスクロール操作が面倒でした。
スクロールバーは細くて扱い難く、スクロールバーの近辺のリンクは誤って選択してしまいます。</p>

<p>Android のようにドラッグでスクロールできるアドオンもありますが、副作用もあります。
ツールバーでスクロールボタンを実装しているアドオンを探してみましたが、見つけられませんでした。</p>

<p>幸い、ページ先頭/ページ末尾に移動できるボタンを実装したToolbar Buttons アドオンがありましたので、改造して代用することにしました。
XUL の<code>cmd_scrollBottom</code> を<code>cmd_scrollPageDown</code> に、<code>cmd_scrollTop</code> を<code>cmd_scrollPageUp</code> に置換しています。</p>

<h4>Toolbar Buttons アドオンのインストール</h4>

<p><a href="https://addons.mozilla.org/ja/firefox/addon/toolbar-buttons/">https://addons.mozilla.org/ja/firefox/addon/toolbar-buttons/</a></p>

<h4>スクリプトの改造(修正前)</h4>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollBottom').doCommand('cmd_scrollBottom');" /&gt;
</code></pre>

<p>```</p>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollTop').doCommand('cmd_scrollTop');" /&gt;
</code></pre>

<p>```</p>

<h4>スクリプトの改造(修正後)</h4>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollPageDown').doCommand('cmd_scrollPageDown');" /&gt;
</code></pre>

<p>```</p>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollPageUp').doCommand('cmd_scrollPageUp');" /&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Blogging with Octopress]]></title>
    <link href="http://ktkr3d.github.io/blog/2013/12/30/remote-blogging-with-octopress/"/>
    <updated>2013-12-30T10:09:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2013/12/30/remote-blogging-with-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/octopress_helper.png"><img src="/images/octopress_helper.png"></a></p>

<p>モバイルPC からGitHub 上に構築したOctopress を更新してみます。
今回は、Octopress を設定済みのホストPC のリモートディレクトリをマウントして利用します。</p>

<!-- more -->


<h4>ホストPC のディスクをsshfs でマウント</h4>

<p><code>bash
$ ssh-keygen
$ ssh-copy-id -i ~/.ssh/id_rsa.pub username@hostname -p 22222
$ ssh username@hostname -p 22222
$ sshfs username@hostname:/mnt/common /mnt/common -p 22222 -o reconnect
</code></p>

<p>自動でマウントするには、<code>gnome-session-properties</code> で設定するか、<code>/etc/fstab</code> に設定します。</p>

<h4>Ruby のインストール</h4>

<p><code>bash
$ curl -L https://get.rvm.io | bash -s stable --ruby
$ rvm install 1.9.3
$ rvm use 1.9.3
$ rvm rubygems latest
$ cd /mnt/common/github/octopress
$ bundle install
</code></p>

<h4>.bashrc の設定</h4>

<p><code>bash .bashrc
PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
source $HOME/.rvm/scripts/rvm
</code></p>

<h4>Git の設定</h4>

<p><code>bash
$ git config --global user.name "username"
$ git config --global user.email mail_account_name@mail_domain_name
</code></p>

<h4>GitHub の設定</h4>

<p>GitHub にログインして~/.ssh/id_rsa.pub を登録</p>

<h4>Octopress Helper の設定</h4>

<p><a href="http://ktkr3d.github.io/blog/2013/10/08/yad/">http://ktkr3d.github.io/blog/2013/10/08/yad/</a></p>

<p><a href="http://ktkr3d.github.io/blog/2013/07/15/zenity-octopress-helper/">http://ktkr3d.github.io/blog/2013/07/15/zenity-octopress-helper/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaning]]></title>
    <link href="http://ktkr3d.github.io/blog/2013/12/29/cleaning/"/>
    <updated>2013-12-29T12:40:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2013/12/29/cleaning</id>
    <content type="html"><![CDATA[<p>年末だし、ハードディスクの中の重複したファイルを見つけて、削除してしまおう。</p>

<!-- more -->


<h4>対象とするファイル</h4>

<ul>
<li>ファイルサイズが大きめ</li>
<li>不完全なファイルも存在する</li>
<li>ディレクトリ階層を再帰的に検索</li>
</ul>


<p>そのため、先頭1MB を対象としたハッシュ比較により、ファイルの同一性を検出します。</p>

<h4>スクリプト</h4>

<p>``` bash ~/test.sh</p>

<h1>!/bin/sh</h1>

<p>cp /dev/null /tmp/list0.txt
find . -type f -exec dd if={} bs=1024 count=1000 of=/tmp/work.bin \; -exec md5sum /tmp/work.bin >> /tmp/list0.txt \; -exec du {}  >> /tmp/list0.txt \;
sed &lsquo;:loop; N; $!b loop; ;s/\/tmp\/work.bin\n//g&rsquo; /tmp/list0.txt > /tmp/list1.txt
sort /tmp/list1.txt | uniq -D -w 32  > /tmp/list2.txt
rm /tmp/work.bin /tmp/list0.txt
```</p>

<h4>スクリプトの実行</h4>

<p><code>bash
$ cd /PATH/TO/TARGET
$ time ~/test.sh
</code></p>

<h4>実行結果</h4>

<table>
<thead>
<tr>
<th align="left">出力されるファイル</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">/tmp/list1.txt</td>
<td align="left">ハッシュとサイズとパス</td>
</tr>
<tr>
<td align="left">/tmp/list2.txt</td>
<td align="left">重複しているファイルの一覧</td>
</tr>
</tbody>
</table>


<h3>ファイルの削除</h3>

<p>ファイルのサイズとディレクトリを参照して冗長なファイルを削除します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add remote location over SSH on XBMC]]></title>
    <link href="http://ktkr3d.github.io/blog/2013/12/22/add-remote-location-over-ssh-on-xbmc/"/>
    <updated>2013-12-22T10:50:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2013/12/22/add-remote-location-over-ssh-on-xbmc</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/xbmc-ssh.png"><img src="/images/xbmc-ssh.png"></a></p>

<p>外出先から自宅のPC に格納しているメディアにアクセスするためにXBMC を設定してみました。</p>

<!-- more -->


<p>Android やモバイルLinux にインストールしたXBMC からSSH 経由で自宅PC のメディアにアクセスするには、<code>Add network location</code> で <code>Secure Shell (SSH/SFTP)</code> プロトコルを選択します。</p>

<p>以下のクライアントで動作確認できました。</p>

<ul>
<li>Android 4.2 + XBMC 12.2</li>
<li>Android-x86 4.0 + XBMC 13.0 alpha10</li>
<li>Ubuntu GNOME 14.04 alpha1 + XBMC 12.0</li>
</ul>


<p>Linux の場合はsshfs でマウントしておいた方が何かと便利</p>

<p><code>bash
$ ssh-keygen
$ ssh-copy-id -i .ssh/id_rsa.pub useranme@hostname -p 22222
</code></p>

<p><code>gnome-session-properties</code> で自動起動するアプリケーションに以下を追加</p>

<p><code>bash
sshfs username@hostname:/mnt/common /mnt/common -p 22222 -o reconnect
</code></p>
]]></content>
  </entry>
  
</feed>
