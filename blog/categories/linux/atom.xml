<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ktkr3d]]></title>
  <link href="http://ktkr3d.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ktkr3d.github.io/"/>
  <updated>2014-01-13T12:05:04+09:00</updated>
  <id>http://ktkr3d.github.io/</id>
  <author>
    <name><![CDATA[ktkr3d]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Irrlicht 1.9 trunk]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/13/irrlicht-1-dot-9-trunk/"/>
    <updated>2014-01-13T11:10:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/13/irrlicht-1-dot-9-trunk</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/irrlicht_1.9_trunk.png"><img src="/images/irrlicht_1.9_trunk.png" title="Irrlicht 1.9 trunk" alt="Irrlicht 1.9 trunk" /></a></p>

<p><a href="http://sourceforge.net/p/irrlicht/code/HEAD/tarball">http://sourceforge.net/p/irrlicht/code/HEAD/tarball</a></p>

<p>Irrlicht 1.9 trunk を試してみたら、シェーダーのバグが修正されていました。
Irrlicht はオープンソースでマルチプラットフォーム対応の3D エンジンです。</p>

<!-- more -->


<h4>実行環境</h4>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">環境</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">ディストロ</td>
<td align="left">Ubuntu GNOME 14.04 a1</td>
</tr>
<tr>
<td align="left">デスクトップ環境</td>
<td align="left">GNOME Shell 3.11.3</td>
</tr>
<tr>
<td align="left">Linux カーネル</td>
<td align="left">3.12.0</td>
</tr>
<tr>
<td align="left">コンパイラ</td>
<td align="left">gcc/g++ 4.8.2</td>
</tr>
<tr>
<td align="left">ビデオカード</td>
<td align="left">GeForce GTX 560 Ti/PCIe/SSE2</td>
</tr>
</tbody>
</table>


<h4>ディレクトリ構成</h4>

<p>OS を入れ替える度に忘れてしまうのでメモ。</p>

<table>
<thead>
<tr>
<th align="left">内容</th>
<th align="left">パス</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Irrlicht 3D エンジン</td>
<td align="left">/mnt/common/tools/irrlicht-trunk</td>
</tr>
<tr>
<td align="left">Bullet</td>
<td align="left">/mnt/common/tools/bullet-2.76</td>
</tr>
<tr>
<td align="left">サウンドエンジン</td>
<td align="left">/mnt/common/tools/cAudio2.1.0-Linux_64</td>
</tr>
<tr>
<td align="left">アプリソース</td>
<td align="left">/mnt/common/home/Projects/Irrlicht/examples/XEffects</td>
</tr>
<tr>
<td align="left">IrrMMD</td>
<td align="left">/mnt/common/home/Projects/Irrlicht/examples/XEffects/irrmmd</td>
</tr>
<tr>
<td align="left">実行ディレクトリ</td>
<td align="left">/mnt/common/home/Projects/Irrlicht/bin/Linux</td>
</tr>
</tbody>
</table>


<p>Bullet とcAudio は以前ビルドしたものを再利用する。
.so を実行ディレクトリにコピーしておく。</p>

<p>IrrMMD(PMD/VMDローダ) は<code>http://gunload.web.fc2.com/irrlicht/download.html</code>からダウンロードする。</p>

<p><code>/mnt/common/tools/irrlicht-trunk/include/irrUString.h</code> は<code>http://irrlicht.sourceforge.net/forum//viewtopic.php?t=37296</code> からダウンロードする。</p>

<h4>前提パッケージ等</h4>

<p><code>bash
$ sudo apt-get -y install build-essential xserver-xorg-dev x11proto-xf86vidmode-dev libxxf86vm-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libxext-dev libxcursor-dev
$ sudo apt-get install libfreetype6-dev freeglut3-dev libboost-dev libglew1.5-dev libtheora-dev libopenal-dev codeblocks
</code></p>

<h4>Irrlicht のビルド</h4>

<p><code>http://sourceforge.net/p/irrlicht/code/HEAD/tarball</code> のtrunk を選んで、<code>Download Snapshot</code> を押下する。</p>

<p><code>bash
$ cd /mnt/common/tools/irrlicht-trunk/source/Irrlicht
$ make -j4
</code></p>

<h4>Code::Blocks の設定</h4>

<p>Settings &ndash;> Compiler &ndash;> Search directories で設定</p>

<table>
<thead>
<tr>
<th align="left">分類</th>
<th align="left">パス</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Compiler</td>
<td align="left">/mnt/common/tools/irrlicht-trunk/include</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">/mnt/common/tools/cAudio2.1.0-Linux_64/include</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">/mnt/common/tools/bullet-2.76/src</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">/usr/include/freetype2</td>
</tr>
<tr>
<td align="left">Linker</td>
<td align="left">/mnt/common/tools/irrlicht-trunk/lib/Linux</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">/mnt/common/tools/cAudio2.1.0-Linux_64/lib/linux-64</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">/mnt/common/tools/bullet-2.76/lib_x86_64</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MikuMikuPenguin]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/12/mikumikupenguin/"/>
    <updated>2014-01-12T23:40:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/12/mikumikupenguin</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/mikumikupenguin.png"><img src="/images/mikumikupenguin.png" title="MikuMikuPenguin" alt="MikuMikuPenguin" /></a></p>

<p><a href="https://github.com/sn0w75/MikuMikuPenguin">https://github.com/sn0w75/MikuMikuPenguin</a></p>

<p>ニコニコ動画でMikuMikuPenguin が公開されていたので、試してみました。
作成者の方に感謝です。今後に期待ですね。</p>

<!-- more -->


<h4>実行環境</h4>

<table>
<thead>
<tr>
<th align="left">項目</th>
<th align="left">環境</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">ディストロ</td>
<td align="left">Ubuntu GNOME 14.04 a1</td>
</tr>
<tr>
<td align="left">デスクトップ環境</td>
<td align="left">GNOME Shell 3.11.3</td>
</tr>
<tr>
<td align="left">Linux カーネル</td>
<td align="left">3.12.0</td>
</tr>
<tr>
<td align="left">コンパイラ</td>
<td align="left">gcc/g++ 4.8.2</td>
</tr>
<tr>
<td align="left">ビデオカード</td>
<td align="left">GeForce GTX 560 Ti/PCIe/SSE2</td>
</tr>
</tbody>
</table>


<h4>前提ライブラリ等</h4>

<p>確か、こんな感じで入れたと思う。</p>

<p><code>bash
$ sudo apt-get install git dialog automake autoconf libtool libglfw-dev libBullet-dev libglm-dev libSOIL-dev libSDL2-dev libsdl2-mixer-dev
</code></p>

<h4>ビルド</h4>

<p><code>bash
$ ./configure
$ make -j4
</code></p>

<h4>実行</h4>

<p>``` bash
$ ./pmx
This is PMXViewer, a demonstration using the MikuMikuPenguin library.
Usage: pmx [options] model_file.pmx motion_file.vmd
Options:
  -s    Play sound file to go with VMD motion</p>

<pre><code>Only formats compatible with your build of SDL2_mixer are accepted.
If libmmp was compiled without SDL2_mixer support, no music will play.
</code></pre>

<p>  &mdash;help    display this help and exit
  &mdash;version output version information and exit</p>

<p>FOR JAPANESE DOCUMENTATION, SEE:
&lt;file:///usr/local/share/mikumikupenguin/doc/README_JP.html></p>

<p>Report bugs to <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x69;&#98;&#101;&#x6e;&#x72;&#117;&#x6e;&#x6e;&#x69;&#x6e;&#x40;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#x69;&#x62;&#x65;&#110;&#114;&#x75;&#x6e;&#110;&#105;&#x6e;&#x40;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a> (English or Japanese is ok).
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gEdit 3.11.2]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/12/gedit-3-dot-11-dot-2/"/>
    <updated>2014-01-12T03:39:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/12/gedit-3-dot-11-dot-2</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/gedit_3.11.2.png"><img src="/images/gedit_3.11.2.png" title="gedit 3.11.2" alt="gedit 3.11.2" /></a></p>

<p><a href="http://worldofgnome.org/gedit-3-12-migrates-to-hig-3/">http://worldofgnome.org/gedit-3-12-migrates-to-hig-3/</a></p>

<p>gEdit 3.11.2 がリリースされたので、ビルドして実行してみました。
(私はgedit ではなくgeany を常用してますけれど)</p>

<p>Gitg もそうですが、GNOME Human Interface Guidelines(HIG) 3 に準拠したアプリが続々とリリースされていますね。</p>

<!-- more -->


<h4>gtksouceview-3.0</h4>

<p>前提となる<code>gtksouceview-3.0</code> のバージョン3.11.2 をビルドしてインストールします。</p>

<p><code>ftp://ftp.gnome.org/pub/GNOME/sources/gtksourceview/3.11/gtksourceview-3.11.2.tar.xz</code></p>

<p><code>bash
$ ./configure
$ make -j4
$ sudo make install
</code></p>

<h4>libgd</h4>

<p>libgd をダウンロードします。
後でgedit のフォルダにコピーします。</p>

<p><code>bash
$ git clone git://git.gnome.org/libgd
</code></p>

<h4>gedit</h4>

<p>gedit をビルドします。
make するとgedit 3.11.2 が起動します。</p>

<p><code>https://git.gnome.org/browse/gedit/snapshot/gedit-3.11.2.tar.gz</code></p>

<p><code>bash
$ ./autogen.sh
$ ./configure
$ make -j4
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gitg 0.3.1]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/10/gitg-0-dot-3-1/"/>
    <updated>2014-01-10T20:31:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/10/gitg-0-dot-3-1</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/gitg_0.3.1_vala.png"><img src="/images/gitg_0.3.1_vala.png" title="gitg 0.3.1" alt="gitg 0.3.1" /></a></p>

<p><a href="https://wiki.gnome.org/Apps/Gitg#Get_gitg">https://wiki.gnome.org/Apps/Gitg#Get_gitg</a></p>

<p>VALA 言語で書き直されたgitg 0.3.1 がリリースされたので、ビルドして実行してみました。</p>

<!-- more -->


<h4>libgit2</h4>

<p>前提の<code>libgit2</code>をインストールします。<code>cmake</code> する際に<code>THREADSAFE</code> をON にしておきます。</p>

<p><code>bash
$ git clone https://github.com/libgit2/libgit2.git
$ cd libgit2
$ mkdir build &amp;&amp; cd build
$ cmake .. -DTHREADSAFE:BOOL=ON
$ sudo cmake --build . --target install
</code></p>

<h4>libgit2-glib</h4>

<p>前提の<code>libgit2-glib</code>をインストールします。API の引数が足らない旨のエラーが出るので、引数を追加します。</p>

<p><code>bash
$ git clone https://git.gnome.org/browse/libgit2-glib
</code></p>

<p>``` vala ./libgit2-glib/libgit2-glib/ggit-ref.c
gboolean
ggit_ref_has_reflog (GgitRef *ref)
{</p>

<pre><code>g_return_val_if_fail (GGIT_IS_REF (ref), FALSE);
</code></pre>

<p>//  return git_reference_has_log (_ggit_native_get (ref)) == 1;</p>

<pre><code>return git_reference_has_log (_ggit_native_get (ref), git_reference_name(ref)) == 1;
</code></pre>

<p>}
```</p>

<p><code>bash
$ cd libgit2-glib
$ ./autogen.sh
$ make
$ sudo make install
</code></p>

<h4>libgd</h4>

<p>libgd をダウンロードします。
後でgitg のフォルダにコピーします。</p>

<p><code>bash
$ git clone git://git.gnome.org/libgd
</code></p>

<h4>gitg</h4>

<p><code>gitg</code>をインストールします。</p>

<p><code>https://download.gnome.org/sources/gitg/0.3/gitg-0.3.1.tar.xz</code></p>

<p><code>bash
$ cd gitg-0.3.1
$ ./autogen.sh
$ make
$ sudo make install
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scroll up/down button add-on for firefox]]></title>
    <link href="http://ktkr3d.github.io/blog/2014/01/02/scroll-up-slash-down-button-add-on-for-firefox/"/>
    <updated>2014-01-02T15:41:00+09:00</updated>
    <id>http://ktkr3d.github.io/blog/2014/01/02/scroll-up-slash-down-button-add-on-for-firefox</id>
    <content type="html"><![CDATA[<p><a href="http://ktkr3d.github.io/images/scroll_buttons.png"><img src="/images/scroll_buttons.png"></a></p>

<p>Firefox にスクロールアップ/ダウンボタンを追加してみました。</p>

<!-- more -->


<p>タブレットにインストールしたLinux のFirefox ではタッチスクリーンを使ったスクロール操作が面倒でした。
スクロールバーは細くて扱い難く、スクロールバーの近辺のリンクは誤って選択してしまいます。</p>

<p>Android のようにドラッグでスクロールできるアドオンもありますが、副作用もあります。
ツールバーでスクロールボタンを実装しているアドオンを探してみましたが、見つけられませんでした。</p>

<p>幸い、ページ先頭/ページ末尾に移動できるボタンを実装したToolbar Buttons アドオンがありましたので、改造して代用することにしました。
XUL の<code>cmd_scrollBottom</code> を<code>cmd_scrollPageDown</code> に、<code>cmd_scrollTop</code> を<code>cmd_scrollPageUp</code> に置換しています。</p>

<h4>Toolbar Buttons アドオンのインストール</h4>

<p><a href="https://addons.mozilla.org/ja/firefox/addon/toolbar-buttons/">https://addons.mozilla.org/ja/firefox/addon/toolbar-buttons/</a></p>

<h4>スクリプトの改造(修正前)</h4>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollBottom').doCommand('cmd_scrollBottom');" /&gt;
</code></pre>

<p>```</p>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollTop').doCommand('cmd_scrollTop');" /&gt;
</code></pre>

<p>```</p>

<h4>スクリプトの改造(修正後)</h4>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollPageDown').doCommand('cmd_scrollPageDown');" /&gt;
</code></pre>

<p>```</p>

<p>``` xml tbutton.jar/content/browser.xul</p>

<pre><code>oncommand="document.commandDispatcher.getControllerForCommand('cmd_scrollPageUp').doCommand('cmd_scrollPageUp');" /&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
